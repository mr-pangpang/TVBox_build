name: TVBox 自动化构建与发布
on:
  workflow_dispatch:
    inputs:
      rebuild:
        description: '仅重新构建不发布版本'
        required: false
        type: boolean

env:
  BUILD_DIR: TVBoxOSC
  ARTIFACT_PREFIX: TVBox
  MAX_RETRY: 3

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - userName: q215613905
            repoUrl: https://github.com/mr-pangpang/q215613905_TVBox
            branchName: main
            javaVersion: 17

    steps:
      # ====================
      # 阶段 1：环境准备
      # ====================
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: ${{ env.BUILD_DIR }}
          ref: ${{ matrix.branchName }}
          # 精准检出必要目录（提升检出效率）
          sparse-checkout: |
            ${{ env.BUILD_DIR }}
            .github/scripts/  # JKS文件目录
            buildSrc/        # 自定义构建模块
            gradle/

      - name: 设置构建标识
        id: build-flag
        run: |
          current_commit=$(git -C ${{ env.BUILD_DIR }} rev-parse HEAD)
          last_commit=$(cat log/${{ matrix.userName }}.txt 2>/dev/null || true)
          
          # 增强条件判断逻辑
          if [ "$current_commit" != "$last_commit" ] || ${{ github.event.inputs.rebuild == 'true' }}; then
            echo "构建标识设置..."
            current_tag=$(date +'%Y.%m%d.%H%M')
            echo "commit=$current_commit" >> $GITHUB_ENV
            echo "commit_id=${current_commit:0:7}" >> $GITHUB_ENV
            echo "should_build=true" >> $GITHUB_ENV
            echo "tag=$current_tag" >> $GITHUB_ENV
          else
            echo "🔄 代码无变化，跳过构建"
          fi

      # ====================
      # 阶段 2：构建配置
      # ====================
      - name: 配置Java环境
        if: ${{ env.should_build }}
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ matrix.javaVersion }}
          cache: gradle
          # 关键修改：适配子目录的缓存路径
          cache-dependency-path: |
            ${{ env.BUILD_DIR }}/**/*.gradle*
            ${{ env.BUILD_DIR }}/gradle/wrapper/gradle-wrapper.properties
            ${{ env.BUILD_DIR }}/buildSrc/**/*.kt

      - name: 配置签名信息
        if: ${{ env.should_build }}
        working-directory: ${{ env.BUILD_DIR }}
        run: |
          # 从仓库安全位置复制密钥库
          cp -vf "${{ github.workspace }}/.github/scripts/TVBoxOSC.jks" ./app/
          
          # 使用 heredoc 方式写入配置（避免转义问题）
          cat <<EOF >> gradle.properties
          RELEASE_STORE_FILE=./app/TVBoxOSC.jks
          RELEASE_KEY_ALIAS=TVBoxOSC
          RELEASE_STORE_PASSWORD=TVBoxOSC
          RELEASE_KEY_PASSWORD=TVBoxOSC
          EOF

      # ====================
      # 阶段 3：构建执行
      # ====================
      - name: Gradle构建（含重试）
        if: ${{ env.should_build }}
        uses: nick-fields/retry@v3
        env:
          GRADLE_OPTS: -Dorg.gradle.daemon=false
        with:
          max_attempts: ${{ env.MAX_RETRY }}
          command: |
            cd ${{ env.BUILD_DIR }}
            ./gradlew clean assembleRelease \
              --no-daemon \
              --no-parallel \
              --stacktrace \
              --info  # 增加日志详细度

      - name: 整理构建产物
        if: ${{ env.should_build }}
        working-directory: ${{ env.BUILD_DIR }}
        run: |
          # 创建分层输出目录
          mkdir -p artifacts/{apk,source}
          
          # 查找并重命名APK文件（兼容多模块构建）
          find . -path '*/build/outputs/apk/release/*-release.apk' \
            -exec mv -v {} "artifacts/apk/${{ env.ARTIFACT_PREFIX }}_${{ env.tag }}.apk" \;
          
          # 打包源代码（排除构建产物）
          zip -qr "artifacts/source/${{ env.ARTIFACT_PREFIX }}_${{ env.commit_id }}_src.zip" . \
            -x "build/*" "*.jks" ".git/*"

      # ====================
      # 阶段 4：发布部署
      # ====================
      - name: 生成变更日志
        if: ${{ env.should_build && !inputs.rebuild }}
        working-directory: ${{ env.BUILD_DIR }}
        run: |
          git fetch --depth=100 origin ${{ matrix.branchName }}
          git log --pretty=format:"- %s [%h]" ${{ env.commit_id }}^..HEAD > CHANGELOG.md
          echo -e "\n**构建元数据**\n- 构建ID: ${{ github.run_id }}" >> CHANGELOG.md

      - name: 发布Release
        if: ${{ !inputs.rebuild && env.should_build }}
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: release-${{ env.tag }}
          name: "Release ${{ env.tag }}"
          body_path: ${{ env.BUILD_DIR }}/CHANGELOG.md
          files: |
            ${{ env.BUILD_DIR }}/artifacts/apk/*.apk
            ${{ env.BUILD_DIR }}/artifacts/source/*.zip
          draft: false
          prerelease: ${{ contains(github.ref, 'beta') }}

      - name: 更新构建记录
        if: ${{ env.should_build }}
        env:
          GIT_USER: "CI Bot"
          GIT_EMAIL: "ci@tvbox.org"
        run: |
          git config --global user.name "$GIT_USER"
          git config --global user.email "$GIT_EMAIL"
          
          # 原子化更新构建记录
          mkdir -p log
          echo "${{ env.commit }}" > log/${{ matrix.userName }}.txt
          git add log/
          if ! git diff-index --quiet HEAD --; then
            git commit -m "📌 更新构建标记: ${{ matrix.userName }}@${{ env.commit_id }}"
            git push origin ${{ matrix.branchName }}
          fi
