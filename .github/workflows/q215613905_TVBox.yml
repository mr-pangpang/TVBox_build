name: TVBox 增强版构建流程
on:
  workflow_dispatch:
    inputs:
      rebuild:
        description: '强制重新构建'
        required: false
        type: boolean

env:
  BUILD_DIR: TVBoxOSC
  ARTIFACT_PREFIX: TVBox-Pro
  MAX_RETRY: 3

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - userName: q215613905
            repoUrl: https://github.com/mr-pangpang/q215613905_TVBox
            branchName: main
            javaVersion: 17

    steps:
      # ====================
      # 阶段 1：深度调试准备
      # ====================
      - name: 初始化工作区检查
        run: |
          echo "工作区路径: ${{ github.workspace }}"
          echo "矩阵参数:"
          echo "userName: ${{ matrix.userName }}"
          echo "branch: ${{ matrix.branchName }}"
          mkdir -p ${{ github.workspace }}/debug_logs

      # ====================
      # 阶段 2：智能代码检出
      # ====================
      - name: 全量代码检出
        uses: actions/checkout@v4
        with:
          path: ${{ env.BUILD_DIR }}
          ref: ${{ matrix.branchName }}
          fetch-depth: 100  # 保证足够的提交历史
          sparse-checkout: |
            /*
            !.github/workflows/_archive  # 排除非必要目录

      # ====================
      # 阶段 3：环境验证
      # ====================
      - name: 验证项目结构
        working-directory: ${{ env.BUILD_DIR }}
        run: |
          # 生成目录结构报告
          tree -L 3 -d > ${{ github.workspace }}/debug_logs/directory_structure.txt
          
          # 关键文件检查
          required_files=(
            "build.gradle"
            "settings.gradle"
            "gradle/wrapper/gradle-wrapper.properties"
            "app/build.gradle"
          )
          
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ 关键文件缺失: $file" | tee -a ${{ github.workspace }}/debug_logs/missing_files.log
              exit 1
            fi
          done

      # ====================
      # 阶段 4：精准缓存配置
      # ====================
      - name: 配置Java环境
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ matrix.javaVersion }}
          cache: gradle
          cache-dependency-path: |
            ${{ env.BUILD_DIR }}/**/*.gradle*
            ${{ env.BUILD_DIR }}/gradle/wrapper/gradle-wrapper.properties
            ${{ env.BUILD_DIR }}/buildSrc/**/*.kt

      # ====================
      # 阶段 5：构建执行优化
      # ====================
      - name: 梯度构建（增强版）
        uses: nick-fields/retry@v3
        env:
          GRADLE_USER_HOME: ${{ github.workspace }}/.gradle
          GRADLE_OPTS: -Dorg.gradle.caching=true -Dorg.gradle.console=verbose
        with:
          max_attempts: ${{ env.MAX_RETRY }}
          command: |
            cd ${{ env.BUILD_DIR }}
            # 生成构建扫描报告
            ./gradlew clean assembleRelease \
              --scan \
              --no-daemon \
              --stacktrace \
              --warning-mode all \
              --dependency-verification lenient  # 临时解决依赖验证问题

            # 收集构建报告
            cp -r build/reports/ ${{ github.workspace }}/debug_logs/

      # ====================
      # 阶段 6：安全签名配置
      # ====================
      - name: 配置签名信息
        working-directory: ${{ env.BUILD_DIR }}
        env:
          KEYSTORE_PATH: ${{ secrets.KEYSTORE_PATH }}
        run: |
          # 从加密存储加载签名配置
          echo "配置签名文件路径: $KEYSTORE_PATH"
          jq -r '.keystore' $KEYSTORE_PATH | base64 -d > app/release.keystore
          
          # 动态生成 gradle.properties
          cat <<EOF > gradle.properties
          org.gradle.parallel=true
          RELEASE_STORE_FILE=app/release.keystore
          RELEASE_KEY_ALIAS=${{ secrets.KEY_ALIAS }}
          RELEASE_STORE_PASSWORD=${{ secrets.STORE_PASS }}
          RELEASE_KEY_PASSWORD=${{ secrets.KEY_PASS }}
          EOF

      # ====================
      # 阶段 7：智能产物处理
      # ====================
      - name: 高级产物打包
        working-directory: ${{ env.BUILD_DIR }}
        run: |
          # 创建版本化目录
          RELEASE_DIR="releases/${{ env.ARTIFACT_PREFIX }}_${{ github.run_id }}"
          mkdir -p $RELEASE_DIR
          
          # 移动APK文件并生成校验文件
          find app/build/outputs/apk -name '*.apk' -exec mv {} $RELEASE_DIR \;
          sha256sum $RELEASE_DIR/*.apk > $RELEASE_DIR/checksums.sha256
          
          # 打包调试信息
          zip -qr $RELEASE_DIR/debug_symbols.zip app/build/outputs/mapping

      # ====================
      # 阶段 8：安全发布流程
      # ====================
      - name: 发布版本
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: v${{ github.run_id }}
          name: "Build ${{ github.run_id }}"
          body: |
            ![Build Status](https://img.shields.io/github/actions/workflow/status/${{ github.repository }}/build.yml?branch=${{ matrix.branchName }})
            **构建信息**
            - 提交: [${{ env.commit_id }}](https://github.com/${{ github.repository }}/commit/${{ env.commit }})
            - 时间: $(date -u +"%Y-%m-%dT%H:%M:%SZ")
          files: |
            ${{ env.BUILD_DIR }}/releases/**/*
          draft: false
          generate_release_notes: true

      # ====================
      # 阶段 9：后置清理
      # ====================
      - name: 安全清理
        run: |
          # 删除敏感文件
          rm -rf ${{ env.BUILD_DIR }}/app/release.keystore
          # 归档调试日志
          tar -czvf debug_logs.tar.gz ${{ github.workspace }}/debug_logs
